// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x96\x51\x6f\xe3\x20\x0c\xc7\xdf\xf3\x29\x10\xcf\x0d\x6c\xbb\x87\x93\xf2\x55\x4e\x7b\xa0\xc1\xea\x50\x88\x41\x60\x72\xd3\x9d\xfa\xdd\x4f\x21\xd9\x4a\xa6\x6b\xb5\x56\x53\x9a\x3d\x45\xb1\xc1\xfc\xfc\xb7\x65\xf9\x6f\xc5\x18\xdf\xa7\xb6\x03\x8a\xbc\x61\xe3\x2f\x63\xdc\xa7\xbd\x35\xad\x75\x87\xd1\xf6\x2b\xdb\xd8\xec\xcb\x7e\xc0\xc1\x04\x87\x3d\x20\x15\x07\xa6\xab\xc1\xe9\xd4\x92\x71\xc8\x77\xa5\xbd\x57\xa8\x0e\xa0\xf9\xbb\xed\xf9\xe4\xe6\xa8\x7a\xe0\x0d\xe3\x9d\xd3\x06\x0f\x75\xf1\x7c\x71\x28\xc0\x61\x8c\xda\x30\x9e\x62\x0d\x2a\x52\xfd\xf8\x16\xed\xb8\xbb\x8a\x51\xc3\x00\xd6\xf9\xec\xda\x7d\x70\xbc\x71\x2e\xec\x51\xa1\xde\xbb\xd7\xcf\xc0\x6b\x18\x6e\xe0\xcf\xdf\xe7\x6a\xce\x84\x03\x6a\xef\x0c\x96\x25\x31\x7e\x9d\x52\xa4\x60\x47\xc4\x17\x22\x1f\x1b\x29\xbd\x98\xd2\x12\xad\xeb\x65\x2d\x8d\xdf\x84\xe4\x1f\x20\xb3\xe6\x4f\x67\x49\xab\xe2\x3a\x37\xbe\x7d\x81\xb6\xdb\x86\x98\x13\xca\xb7\x51\x74\x89\xbb\x90\xb5\xd3\xb5\x55\x04\x91\xee\x22\xec\x3c\x37\x3a\x2d\xe2\x0f\xa1\x7a\xf5\xc7\xa1\xfa\x1d\x33\xf7\x29\xbc\x9c\x00\xeb\x01\x42\x34\x0e\x05\xbd\xd2\x16\xa5\xbf\x90\x4b\xf1\xee\xa5\x64\x96\x85\xb1\x06\x90\xbe\xa0\x38\xd7\xb0\xe7\x37\xd7\xa9\xc5\x2d\x6d\x72\x06\x6f\x0e\xb5\x42\x9f\xdc\xd2\x0f\x67\xa0\x3f\xd9\x13\x57\x83\x7f\xa1\xae\xa7\x68\x57\x74\xad\x4b\xfa\x8e\xa3\x24\x73\x67\x08\xd9\x19\x82\x2d\xce\x89\xf9\xac\xb8\x0c\xbc\x54\xd5\x21\x05\x67\xef\xae\xeb\x84\xf1\xad\x94\xfd\x1f\xf2\x42\x5b\x4a\x88\x60\x23\x84\x01\xc2\xea\x02\x37\x52\xd2\x02\x77\x83\xca\xce\x5b\xc5\x79\xce\x49\xce\xf7\x1d\x38\xb8\x44\x50\x2c\xc0\x1a\x86\xe2\xea\x18\xf5\xf1\xe9\xa7\x78\x10\x0f\x22\xaf\xd1\xc7\xea\x58\xfd\x0b\x00\x00\xff\xff\x33\xb4\x57\xcb\xcd\x0c\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 3277, mode: os.FileMode(420), modTime: time.Unix(1476503561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

