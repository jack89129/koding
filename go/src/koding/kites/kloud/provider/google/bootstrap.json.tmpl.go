// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\xdf\xae\x9b\x30\x0c\xc6\xef\x79\x8a\xc8\xda\xe5\x09\xeb\x2e\xf6\xaf\xaf\x32\x4d\xc8\x05\x17\x65\x4d\x63\x64\x12\x90\x56\xf1\xee\x47\x90\x02\x6e\x51\x6f\x62\xfb\xe7\xcf\xf6\x57\x1e\x85\x31\xd0\x09\x0f\xae\x21\x81\xb3\x99\x63\x63\xa0\x65\x6e\x3d\x6d\xb1\x31\x50\x0b\x35\x14\xa2\x43\xdf\xc3\xd9\xc0\x97\xc7\x80\x52\x66\xac\x52\xb5\x09\x3e\xd6\x8e\x4e\xf8\x1f\xd5\xf1\x40\x3f\xf3\x8a\x14\x6a\x1d\x87\x03\x98\xd3\x13\x2c\xd8\x54\x18\x33\xcd\x1d\xc0\x29\x76\x29\xee\xbb\xde\xb8\x71\xa1\xad\xae\x4e\x68\x44\xef\xf5\xd2\x03\xfa\x44\x59\x77\x5d\x95\xef\x5d\x8a\xb4\xd1\x65\xee\x2e\x7b\xf2\xd7\xca\xbb\x70\x3b\x8c\x13\xea\x39\x49\x4d\xef\xe6\x1c\xa4\xf4\xe0\xac\xaa\x32\xc6\x40\xc0\xfb\xb2\x4b\x5b\x93\xcd\x75\xbb\xb5\x7e\x28\x8c\xe2\xc8\x72\x9b\xc9\x86\xae\x98\x7c\xd4\x55\xf4\x9e\xc7\x17\xdd\xec\x74\xe4\x9a\xe7\x0d\x20\xd6\x9d\xe2\xe7\x22\x4b\x9c\xff\xb2\x3f\x2a\x69\x0c\x7c\xff\xf1\xf3\xd7\x6f\x50\xb9\xbf\xdb\x7b\x52\xf3\xf2\xed\x95\x60\x68\xe9\x5d\x05\x4e\xe5\xf2\xfb\x7a\xda\x75\x56\x95\xe9\xcd\xc5\x01\xc5\xe1\x45\x7d\x52\xf0\x9f\xc3\xa2\xb8\x79\xb6\x5e\xfb\x62\x1a\xf6\x0e\x2d\x61\x1f\xbf\xcd\xc7\xed\x91\x45\xed\x0a\x25\xe1\x8e\xec\x48\x4f\x4e\xc7\xf6\xa2\xc9\xd4\xdb\x9a\x42\x14\xf4\x0b\xa8\xc2\x57\xc5\xd4\xef\x53\xd7\xf7\x41\x69\x9b\xb7\xbe\x2d\xc2\xf1\xfe\x62\x2a\x3e\x03\x00\x00\xff\xff\xc7\x49\x37\x74\x66\x03\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 870, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
